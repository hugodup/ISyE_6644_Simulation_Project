# -*- coding: utf-8 -*-
"""
Created on Thu Mar 10 10:04:18 2022

@author: Group 208 - Hugo Dupouy (GT903738077)
"""

# for inline plots in jupyter
%matplotlib inline
# import scipy
import scipy as scipy
# import seaborn
import seaborn as sns
# settings for seaborn plotting style
sns.set(color_codes=True)
# settings for seaborn plot sizes
sns.set(rc={'figure.figsize':(5,5)})


##############################################################################



# random numbers
n = 10000
start = 10
width = 20
p=0.6
a=0
b=1


##############################################################################

# Discrete

## Bernoulli

from scipy.stats import bernoulli
data_bern = bernoulli.rvs(p=0.6, size=n)

graph= sns.displot(data_bern,
                 kde=False,
                 color="purple")
graph.set(xlabel='Bernoulli Distribution', ylabel='Frequency')




## Binomial

from scipy.stats import binom
data_binom = binom.rvs(n=10, p=0.8, size=n)

graph = sns.displot(data_binom,
                  kde=False,
                  color='purple')
graph.set(xlabel='Binomial Distribution', ylabel='Frequency')



## Geometric
from scipy.stats import geom
data_geom = geom.rvs(p, size=n)

graph = sns.displot(data_geom,
                  kde=False,
                  color='purple')
graph.set(xlabel='Geometric', ylabel='Frequency')




## Negative Binomial

from scipy.stats import nbinom
data_nbinom = nbinom.rvs(n=10, p=0.5, size=n)

graph = sns.displot(data_nbinom,
                  kde=False,
                  color='purple')
graph.set(xlabel='Negative Binomial', ylabel='Frequency')



## Poisson

from scipy.stats import poisson
data_poisson = poisson.rvs(mu=3, size=n)

graph = sns.displot(data_poisson,
                  bins=30,
                  kde=False,
                  color='purple')
graph.set(xlabel='Poisson Distribution', ylabel='Frequency')




##############################################################################



# Continuous

## Uniform

from scipy.stats import uniform
data_uniform = uniform.rvs(loc=start, scale=width, size=n)

graph = sns.displot(data_uniform,
                  bins=100,
                  kde=True,
                  color='purple')
graph.set(xlabel='Uniform Distribution ', ylabel='Frequency')



## Exponential

from scipy.stats import expon
data_expon = expon.rvs(loc=start, scale=width, size=n)

graph = sns.displot(data_expon,
                  kde=True,
                  bins=100,
                  color='purple')
graph.set(xlabel='Exponential Distribution', ylabel='Frequency')




## Erlang
### to double check if this one actually works like Gamma
from scipy.stats import erlang
data_erlang = erlang.rvs(a=5, size=n)

graph = sns.displot(data_erlang,
                  kde=True,
                  bins=100,
                  color='purple')
graph.set(xlabel='Erlang Distribution', ylabel='Frequency')



## Gamma 
from scipy.stats import gamma
data_gamma = gamma.rvs(5, size=n)

graph = sns.displot(data_gamma,
                  kde=True,
                  bins=100,
                  color='purple')
graph.set(xlabel='Gamma Distribution', ylabel='Frequency')



## Triangular 
from scipy.stats import triang
data_triang = triang.rvs(c=0.158, size=n)

graph = sns.displot(data_triang,
                  kde=True,
                  bins=100,
                  color='purple')
graph.set(xlabel='Triangular Distribution', ylabel='Frequency')



## Beta
from scipy.stats import beta
data_beta = beta.rvs(a=2.31, b=0.627, size=n)

graph = sns.displot(data_beta,
                  kde=False,
                  bins=100,
                  color='purple')
graph.set(xlabel='Beta(a,b)', ylabel='Frequency')



## Weibull 
from scipy.stats import exponweib
data_exponweib = exponweib.rvs(a=5, c=3, size=n)

graph = sns.displot(data_exponweib,
                  kde=True,
                  bins=100,
                  color='purple')
graph.set(xlabel='Weibull Distribution', ylabel='Frequency')



## Cauchy
from scipy.stats import cauchy
data_cauchy = cauchy.rvs(size=n)

graph = sns.displot(data_cauchy,
                  bins=100,
                  kde=True,
                  color='purple')
graph.set(xlabel='Cauchy Distribution', ylabel='Frequency')



## Normal
from scipy.stats import norm
# generate random numbers from N(0,1)
data_normal = norm.rvs(loc=0, scale=1, size=n)

graph = sns.displot(data_normal,
                  bins=100,
                  kde=True,
                  color='purple')
graph.set(xlabel='Normal Distribution', ylabel='Frequency')


#### testing for normal distribution
mean, var, skew, kurt = norm.stats(moments='mvsk')
print("Normal distribution: mean=",mean," and the var=",var)